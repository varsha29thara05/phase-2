# -*- coding: utf-8 -*-
"""project code

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19j2KFMT1NYmrZrHWXJ7z9kq96jw_OnO4
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

# 1. Load CSV data
data = pd.read_csv("digits.csv")  # replace with your CSV file name

# 2. Split into features and labels
X = data.iloc[:, 1:].values  # pixel values
y = data.iloc[:, 0].values   # labels

# 3. Normalize pixel values (0-1)
X = X / 255.0

# 4. Reshape to (28, 28, 1)
X = X.reshape(-1, 28, 28, 1)

# 5. Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 6. Build CNN model
model = tf.keras.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)),
    tf.keras.layers.MaxPooling2D((2,2)),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2,2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')
])

# 7. Compile model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# 8. Train model
model.fit(X_train, y_train, epochs=5, validation_split=0.1)

# 9. Evaluate model
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {accuracy:.4f}")

# 10. Visualize a prediction
pred = model.predict(np.expand_dims(X_test[0], axis=0))
plt.imshow(X_test[0].reshape(28, 28), cmap='gray')
plt.title(f"Predicted Label: {np.argmax(pred)}")
plt.show()